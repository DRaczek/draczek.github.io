/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef, useEffect, useState } from "react";
import { useGLTF } from "@react-three/drei";
import * as THREE from "three";
import { useFrame, useThree } from "@react-three/fiber";

export function HeadModel(props) {
  const { nodes, materials } = useGLTF("/head/head2.glb");
  const groupRef = useRef(null);
  const leftEyeRef = useRef();
  const rightEyeRef = useRef();

  const [mousePos, setMousePos] = useState({ x: 0 });
  const isMobile = /Mobi|Android/i.test(navigator.userAgent);

  useEffect(() => {
    if (isMobile) {
      return;
    }

    const handleMouseMove = (e) => {
      const x = (e.clientX / window.innerWidth) * 2 - 1; // z zakresu [0, 1] → [-1, 1]
      setMousePos({ x });
    };

    window.addEventListener("mousemove", handleMouseMove);
    return () => window.removeEventListener("mousemove", handleMouseMove);
  }, []);

  useEffect(() => {
    if (groupRef.current) {
      const box = new THREE.Box3().setFromObject(groupRef.current);
      const center = new THREE.Vector3();
      box.getCenter(center);
      groupRef.current.position.sub(center); // przesuwa model tak, by jego środek był w (0, 0, 0)
    }
  }, []);

  //Animacja oczu – podążanie za kursorem
  useFrame(() => {
    if (isMobile) return;
    const rotY = THREE.MathUtils.clamp(mousePos.x * 0.2, -0.1, 0.1);
    if (leftEyeRef.current) leftEyeRef.current.rotation.y = rotY;
    if (rightEyeRef.current) rightEyeRef.current.rotation.y = rotY;
  });

  return (
    <group
      {...props}
      scale={[15, 15, 15]}
      position={(0, 0, 0)}
      dispose={null}
      ref={groupRef}
    >
      <mesh
        ref={leftEyeRef}
        castShadow
        receiveShadow
        geometry={nodes.EyeLeft.geometry}
        material={materials.Wolf3D_Eye}
      />
      <mesh
        ref={rightEyeRef}
        castShadow
        receiveShadow
        geometry={nodes.EyeRight.geometry}
        material={materials.Wolf3D_Eye}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Wolf3D_Hair.geometry}
        material={materials.Wolf3D_Hair}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Wolf3D_Head.geometry}
        material={materials.Wolf3D_Skin}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Wolf3D_Shirt.geometry}
        material={materials.Wolf3D_Shirt}
      />
    </group>
  );
}

useGLTF.preload("/head/head2.glb");
